print("starting...")



# -*- coding: utf-8 -*-
"""part_1_mobility_script_generic(new_dataset)_new (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGNHBaJAS1w2hsZw4c_Kx4bFdQ0Kzdg_
"""

print("starting...")

from pyspark.sql.window import Window 
import pyspark
from pyspark import SparkContext

from pyspark.sql import functions as F
import pyspark.sql.functions as func


from pyspark.sql.functions import udf
from pyspark.sql.types import *
from pyspark.sql.functions import col, window
import pyspark.sql.functions as func
from pyspark.sql.functions import desc
import datetime, time
from pyspark.sql.types import IntegerType
from pyspark.sql.functions import *
from pyspark.sql.window import Window
from pyspark.sql.window import Window
import pyspark.sql.functions as sf

import datetime as dt
import numpy as np
import os

from multiprocessing.pool import Pool
import pickle
import pandas as pd

from h3 import h3


from math import radians, cos, sin, asin, sqrt
from pyspark.sql.functions import lit
import json

from datetime import datetime, date, timedelta

#spark.conf.set("fs.azure.account.key.iasocialdata.dfs.core.windows.net",
#"5NXk2QYSRf4tbGSG1Sx20Seg6lkABbERa7ao2h0ZxWbSkLQtuy3+9yYDgr6+FDRKy1Rloi0d2dWa2XmF657SwQ==")
#spark.conf.set("spark.sql.execution.arrow.enabled", "true")  #### Enable Arrow-based columnar data transfers

#sc.install_pypi_package("boto3==1.16.35")
#sc.install_pypi_package("SqlAlchemy")
#sc.install_pypi_package("pymysql")

# from pyspark.sql import SparkSession
# spark = SparkSession.builder.appName("S3CSVRead").getOrCreate()

from pyspark.sql import SparkSession
import sys
import boto3
from io import BytesIO

from functools import reduce
from pyspark.sql import DataFrame

from pyspark.sql.functions import round, col
from dateutil import tz
import sqlalchemy as db


## oci imports
import oci
import os
import io
import sys
from pathlib import Path
from oci.config import validate_config
from oci.object_storage import ObjectStorageClient

#ociconf = oci.config.from_file()

spark = SparkSession.builder.appName("custom_update") \
        .config("spark.default.parallelism", '120')\
        .config("spark.scheduler.mode", "FAIR") \
        .config("spark.pyspark.virtualenv.enabled", "true") \
        .config("spark.delta.logStore.oci.impl","io.delta.storage.OracleCloudLogStore")\
        .config("fs.oci.client.custom.authenticator", "com.oracle.bmc.hdfs.auth.InstancePrincipalsCustomAuthenticator")\
        .config('fs.oci.client.hostname', "https://objectstorage.us-ashburn-1.oraclecloud.com")\
        .config('fs.oci.client.auth.tenantId.region', "us-ashburn-1")\
        .getOrCreate()

client = "all_ind_3.4_all"#dbutils.widgets.get('client')#"Test_silver_level"
input_date= "2023-01-02"#sys.argv[1]
country= "IND"#sys.argv[2]#"USA"#dbutils.widgets.get('country') #"IND"
indexing_level=12#int(dbutils.widgets.get('indexing_level'))#int("12")
poi_version = '3.4'
source = "GRAVY"
save_string = f"oci://ia-visitation-data@bmmp5bv7olp2/poiVisit/delta/{country}/all_{country.lower()}_all_poi_{poi_version.replace('.','_')}/12"


AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

try:
    spark._jsc.hadoopConfiguration().set("fs.s3a.access.key", AWS_ACCESS_KEY_ID)
    spark._jsc.hadoopConfiguration().set("fs.s3a.secret.key", AWS_SECRET_ACCESS_KEY)
except Exception as e:
    print(e)


print(save_string)

df = spark.read.format("delta").load(save_string, headers=True).where(f"country = '{country}' and date = '{input_date}'")

df.show(3)

df.printSchema()

df = df.withColumn("year", col("year").cast("integer"))
df.printSchema()

df.write.partitionBy(["country","source","year","month","date"]).format("delta")\
        .mode('overwrite').option("timestampFormat", "yyyy-MM-dd HH:mm:ss")\
        .option("overwriteschema", "true")\
        .save(save_string,header =True)

s3_save_string = f"s3a://ia-visitation-data/poiVisit/delta/{country}/all_ind_all_poi_{poi_version.replace('.','_')}/12"

df = spark.read.format("delta").load(s3_save_string, headers=True).where(f"country = '{country}' and date = '{input_date}'")

df.show(3)

df.printSchema()

df = df.withColumn("year", col("year").cast("integer"))
df.printSchema()

df.write.partitionBy(["country","source","year","month","date"]).format("delta")\
        .mode('overwrite').option("timestampFormat", "yyyy-MM-dd HH:mm:ss")\
        .option("overwriteschema", "true")\
        .save(s3_save_string,header =True)

df.unpersist()
# all join data fix

save_string = f"oci://ia-visitation-data@bmmp5bv7olp2/step_05/all_join_data_{poi_version.replace('.','_')}/"
step_5_df = spark.read.format("parquet").load(save_string, header=True).where(f"country = '{country}' and date = '{input_date}'")
step_5_df = step_5_df.withColumn("year", col("year").cast("integer"))
step_5_df.write.partitionBy(["country", "vendorSource","year","date"]).mode('overwrite').format('parquet').option("overwriteSchema", "true").save(save_string, header=True)


# all_visitation_data_

save_string = f"oci://ia-visitation-data@bmmp5bv7olp2/step_05/all_visitation_data_{poi_version.replace('.','_')}/"

step_5_df_visit = spark.read.format("delta").load(save_string, headers=True).where(f"country = '{country}' and date = '{input_date}'")

step_5_df_visit = step_5_df_visit.withColumn("year", col("year").cast("integer"))

step_5_df_visit.write.partitionBy(["country","customer","vendorSource","year","date"])\
.mode('overwrite')\
.format('delta')\
.option("overwriteSchema", "true")\
.save(save_string, header=True)

#s3

s3_save_string = f"s3a://ia-visitation-data/step_05/all_visitation_data_{poi_version.replace('.','_')}/"
step_5_df_visit.write.partitionBy(["country","customer","vendorSource","year","date"])\
.mode('overwrite')\
.format('delta')\
.option("overwriteSchema", "true")\
.save(s3_save_string, header=True) 

# all_poi_visitation_data

save_string = f"oci://ia-visitation-data@bmmp5bv7olp2/step_05/all_poi_visitation_data_{poi_version.replace('.','_')}/"

step_5_df_visit = spark.read.format("delta").load(save_string, headers=True).where(f"country = '{country}' and date = '{input_date}'")

step_5_df_visit = step_5_df_visit.withColumn("year", col("year").cast("integer"))

step_5_df_visit.write.partitionBy(["country","version","customer","vendorSource","year","date"])\
.mode('overwrite')\
.format('delta')\
.option("overwriteSchema", "true")\
.save(save_string, header=True)

s3_save_string = f"s3a://ia-visitation-data/step_05/all_poi_visitation_data_{poi_version.replace('.','_')}/"
step_5_df_visit.write.partitionBy(["customer","vendorSource", "date"]).mode('overwrite')\
.format('delta').option("overwriteSchema", "true").save(s3_save_string, header=True)

spark.stop()